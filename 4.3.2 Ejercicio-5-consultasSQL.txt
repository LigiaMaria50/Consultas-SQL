--Ejercicio 5: Consultas SQL

--Selecciona las columnas film_id y title de la tabla film
SELECT film_id, title FROM film;

--Selecciona 5 filas de la tabla film, obteniendo todas las columnas.
SELECT * FROM film LIMIT 5;

--Selecciona filas de la tabla film donde film_id sea menor que 4.
SELECT * FROM film WHERE film_id < 4 

--Selecciona filas de la tabla film donde el rating sea PG o G.
SELECT * FROM film WHERE rating IN ('PG','G');

--Selecciona filas de la tabla actor donde el nombre sea Angela, Angelina o Audrey usando IN.
SELECT * FROM actor WHERE first_name IN ('Angela','Angelina','Audrey');

--Obtén una lista de actores con el nombre Julia.
SELECT * FROM actor WHERE first_name IN ('Julia');
SELECT * FROM actor WHERE first_name = 'Julia';
SELECT * FROM actor WHERE LOWER(first_name) = 'julia';

--Obtén una lista de actores con los nombres Chris, Cameron o Cuba.
SELECT * FROM actor WHERE LOWER(first_name) IN ('chris', 'cameron', 'cuba');
SELECT * FROM actor WHERE LOWER(first_name) IN ('chris', 'cameron', 'cuba')
ORDER BY first_name;
SELECT * FROM actor WHERE first_name ='Chris' OR first_name ='Cameron' OR first_name ='Cuba';

--Selecciona la fila de la tabla customer para el cliente con el nombre Jamie Rice
SELECT * FROM customer 
WHERE LOWER(first_name) = 'jamie' AND LOWER(last_name) = 'rice';
SELECT * FROM customer WHERE first_name = 'Jamie' AND last_name = 'Rice';

--Selecciona el monto y la fecha de pago de la tabla 
--payment donde el monto pagado sea menor a $1.
SELECT amount, payment_date FROM payment WHERE amount < 1 ORDER BY payment_date;
SELECT amount, payment_date FROM payment WHERE amount < 1;

--¿Cuáles son las diferentes duraciones de alquiler permitidas por la tienda?
SELECT rental_duration FROM film GROUP BY rental_duration ORDER BY rental_duration;

--Ordena las filas en la tabla city por country_id y luego por city.
SELECT * FROM city ORDER BY country_id, city;

--¿Cuáles son los ID de los últimos 3 clientes que devolvieron un alquiler?
SELECT return_date, customer_id FROM rental 
WHERE return_date IS NOT NULL ORDER BY return_date DESC LIMIT 3;

--¿Cuántas películas tienen clasificación NC-17? ¿Cuántas tienen clasificación PG o PG-13?
SELECT rating, COUNT (rating) FROM film 
WHERE rating IN ('PG', 'PG-13', 'NC-17')
GROUP BY rating;

--¿Cuántos clientes diferentes tienen registros en la tabla rental?
SELECT COUNT (DISTINCT customer_id) FROM rental;

--¿Hay algún cliente con el mismo apellido?
SELECT last_name, COUNT(last_name) FROM customer GROUP BY last_name HAVING COUNT(last_name)>1;

--¿Qué película (id) tiene la mayor cantidad de actores?
SELECT film_id, COUNT(actor_id) FROM film_actor GROUP BY film_id HAVING COUNT(film_id)>1 ORDER BY COUNT (actor_id) DESC LIMIT 1;


--¿Qué actor (id) aparece en la mayor cantidad de películas?
SELECT COUNT (actor_id)AS amount_participation_actor, actor_id FROM film_actor GROUP BY actor_id ORDER BY COUNT (actor_id) DESC LIMIT 1;
SELECT  film_actor.film_id, actor.first_name, actor.last_name FROM film_actor JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film_actor.actor_id = 107;


--Cuenta el número de ciudades para cada country_id en la tabla city.
--Ordena los resultados por count(*).
SELECT COUNT(city), country_id FROM city GROUP BY country_id ORDER BY COUNT(*);
SELECT COUNT(*), country_id FROM city GROUP BY country_id ORDER BY COUNT(*);
SELECT country_id, COUNT(*) AS city_number FROM city GROUP BY country_id ORDER BY city_number;

--¿Cuál es la tarifa de alquiler promedio de las películas? ¿Puedes redondear el resultado a 2 decimales?
SELECT ROUND (AVG(rental_rate),2) AS rounded_rental_rate FROM film

--Selecciona los 10 actores que tienen los nombres más largos (nombre y apellido combinados).
SELECT actor_id, first_name, last_name, SUM(COALESCE(LENGTH(first_name)) + COALESCE(LENGTH(last_name))) AS longitude FROM actor GROUP BY actor_id ORDER BY longitude DESC LIMIT 10;
SELECT (actor_id, first_name, last_name), SUM(COALESCE(LENGTH(first_name)) + COALESCE(LENGTH(last_name))) AS longitude FROM actor GROUP BY actor_id ORDER BY longitude DESC LIMIT 10;

